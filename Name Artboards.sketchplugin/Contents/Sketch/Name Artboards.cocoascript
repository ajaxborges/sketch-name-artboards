@import './lib/FBSettings.js'

var onRun = function(context) {
  var doc = context.document;

  const settings = FBSettings.pluginSettings((context.plugin).identifier(), "JTNameArtboards");
  const kSettingsKeys = {
    "drawSlice": "drawSlice",
    "selectedOptionIndex": "selectedOptionIndex",
  }

  // initialize defaults
  if (!settings.getSetting(kSettingsKeys.drawSlice)) {
    settings.updateSetting(kSettingsKeys.drawSlice, true);
  }
  var options = ['.5x', '1x', '1.5x', '2x', '3x'];
  if (!settings.getSetting(kSettingsKeys.selectedOptionIndex)) {
    settings.updateSetting(kSettingsKeys.selectedOptionIndex, 3); // for 2x
  }

  log("========================= sketch-name-artboards log =========================");
  var groupName = 'Artboard labels'
  var artboards = [[doc currentPage] artboards];

  // Remove any previous existing 'Artboard labels' group
  allLayers = [[doc currentPage] layers];
  for(var i=0; i< [allLayers count]; i++){
    var layer = [allLayers objectAtIndex:i];
    if ([layer name] == groupName) {
      [layer removeFromParent];
    }
  }

  // Query resolution for appropriate font size and spacings, ask if slice should be drawn
  var choice = createSelect(
      'What resolution are you working at?',
      options,
      settings.getSetting(kSettingsKeys.selectedOptionIndex),
      settings.getSetting(kSettingsKeys.drawSlice));

  const selectedOptionIndex = choice[1];
  if (selectedOptionIndex > -1) {
    settings.updateSetting(kSettingsKeys.selectedOptionIndex, selectedOptionIndex);
  }
  var scaleFactor = parseFloat(options[selectedOptionIndex]);
  log("Resolution: " + scaleFactor + "x");

  var shouldDrawSlice = choice[2];
  settings.updateSetting(kSettingsKeys.drawSlice, shouldDrawSlice);
  log("Should Draw Slice? " + shouldDrawSlice);

  if (choice[0] == NSAlertFirstButtonReturn) {
    // Name artboards

    // New group to hold labels
    var group = [[MSLayerGroup alloc] init];
    [group setName: groupName]
    [[doc currentPage] addLayers:[group]];

    if (shouldDrawSlice) {
      // Get bounds
      var contentBounds = context.document.currentPage().contentBounds()

      // Draw slice
      var slice = [MSSliceLayer new];
      [slice setName: [doc displayName].split(".sketch")[0]];
      var padding = 100 * scaleFactor;

      [[slice frame] setX: contentBounds.origin.x - padding];
      [[slice frame] setY: contentBounds.origin.y - padding];
      [[slice frame] setWidth: contentBounds.size.width + (padding * 2)];
      [[slice frame] setHeight: contentBounds.size.height + (padding * 2)];
      log(">> Drawing slice" )

      [group addLayers:[slice]];
      [slice select:true byExpandingSelection:false];
    }

    var labels = [];
    const labelLineHeight = 16 * scaleFactor;
    const labelFontSize = 14 * scaleFactor;
    for(var i=0; i< [artboards count]; i++){
      var artboard = artboards[i];
      var artboardName = [artboard name];

      // Create label and set properties
      // 4 used to be the scaleFactor for frame y
      var textLayer = [[MSTextLayer alloc] initWithFrame:CGRectMake(
        [[artboard frame] x] + (2 * scaleFactor),
        [[artboard frame] y] - labelLineHeight - (14 * scaleFactor),
        0,
        labelLineHeight
      )];
      [textLayer setName: artboardName];
      [textLayer setStringValue: artboardName];
      [textLayer setFontSize: labelFontSize];
      [textLayer setFontPostscriptName: 'SF UI Text'];
      [textLayer setLineHeight: labelLineHeight];

//      var color = [MSImmutableColor colorWithRed:188/255 green:188/255 blue:188/255 alpha:1.0];
      var color = [MSImmutableColor colorWithRed:35/255 green:35/255 blue:35/255 alpha:1.0];
      [textLayer setTextColor: color];

      labels.push(textLayer);
    }

    [group addLayers:labels];

    // Select each layer to make group the size of the layers within
    groupLayers = [group layers];
    for(var i=0; i< [groupLayers count]; i++){
      var layer = [groupLayers objectAtIndex:i];
      [layer select:true byExtendingSelection:false];
    }

    // Lock group
    [group setIsLocked:true];
    [doc showMessage: [groupLayers count] + ' artboard labels created in "Artboard labels" group.'];
  }
}

//
// Helpers
//

function createSelect(msg, items, selectedItemIndex, drawSlice){
  selectedItemIndex = selectedItemIndex || 0;

  var accessory = [[NSView alloc] initWithFrame:NSMakeRect(0,0,200,62)];

  var combobox = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,37,200,25)];
  [combobox addItemsWithObjectValues:items];
  [combobox selectItemAtIndex:selectedItemIndex];

  var checkbox = [[NSButton alloc] initWithFrame:NSMakeRect(0,0,200,25)];
  [checkbox setButtonType:NSSwitchButton];
  [checkbox setTitle:@"Draw Slice"];
  if (drawSlice == true) {
    [checkbox setState:NSOnState];
  } else {
    [checkbox setState:NSOffState];
  }

  [accessory addSubview:checkbox];
  [accessory addSubview:combobox];

  var alert = [[NSAlert alloc] init];
  [alert setMessageText:msg];
  [alert addButtonWithTitle:'OK'];
  [alert addButtonWithTitle:'Cancel'];
  [alert setAccessoryView:accessory];

  var responseCode = [alert runModal];
  var combosel = [combobox indexOfSelectedItem];
  if (!combosel) combosel = [combobox stringValue];
  var checksel = [checkbox state] == NSOnState;

  return [responseCode, combosel, checksel];
}
